// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strack.Model.Database;

#nullable disable

namespace Strack.Migrations
{
    [DbContext(typeof(StrackDbContext))]
    partial class StrackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AvgAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgHeartrateBeatsPerMinute")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgSpeedKilometersPerHour")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgTemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("BeginTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("CaloriesKilocalories")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("FinishTimeUtc")
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxBeatsPerMinute")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSpeedKilometersPerHour")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxTemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<double>("MinAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("MinTemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("MovingTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("PauseTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalAscentMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalDescentMeters")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalDistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("TotalTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.Cycling.CyclingActivityDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double>("AvgCadenceCyclesPerMinute")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgLeftBalancePercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgLeftPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("AvgPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgRightBalancePercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgRightPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("FunctionalThresholdPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("IntensityFactor")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxCadenceCyclesPerMinute")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxLeftPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxRightPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("NormalizedPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalPowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double>("TrainingStressScore")
                        .HasColumnType("REAL");

                    b.Property<double>("VariabilityIndex")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityCyclingData");
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.Data.CyclingSamplingDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("CadenCyclesPerMinute")
                        .HasColumnType("REAL");

                    b.Property<double?>("CadenceRpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("LeftPowerPercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("LeftTorqueNm")
                        .HasColumnType("REAL");

                    b.Property<double?>("PedalSmoothnessPercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("PowerWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("RightPowerPercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("RightTorqueNm")
                        .HasColumnType("REAL");

                    b.Property<Guid>("SamplingId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TorqueEfficiencyPercent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SamplingId")
                        .IsUnique();

                    b.ToTable("SamplingCyclingData");
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.Data.SourceDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("SourceData");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.SamplingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("DistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<int?>("HeartrateBeatPerMinute")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LatitudeDegrees")
                        .HasColumnType("REAL");

                    b.Property<double>("LongitudeDegrees")
                        .HasColumnType("REAL");

                    b.Property<double?>("SpeedMetersPerSecond")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TimestampUTC")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Sampling");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Source");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.XingzheSourceDataEntity", b =>
                {
                    b.HasBaseType("Strack.Model.Entity.Sampling.Data.SourceDataEntity");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.ToTable("SourceXingZhe");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.Cycling.CyclingActivityDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.Data.CyclingSamplingDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Sampling.SamplingEntity", "Sampling")
                        .WithOne("CyclingData")
                        .HasForeignKey("Strack.Model.Entity.Sampling.Data.CyclingSamplingDataEntity", "SamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sampling");
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.Data.SourceDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Source.SourceEntity", "Source")
                        .WithOne("Data")
                        .HasForeignKey("Strack.Model.Entity.Sampling.Data.SourceDataEntity", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.SamplingEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithMany("Samplings")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Source")
                        .HasForeignKey("Strack.Model.Entity.Source.SourceEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.XingzheSourceDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Sampling.Data.SourceDataEntity", null)
                        .WithOne()
                        .HasForeignKey("Strack.Model.Entity.Source.Data.XingzheSourceDataEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Navigation("Samplings");

                    b.Navigation("Source")
                        .IsRequired();
                });

            modelBuilder.Entity("Strack.Model.Entity.Sampling.SamplingEntity", b =>
                {
                    b.Navigation("CyclingData");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.Navigation("Data")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
