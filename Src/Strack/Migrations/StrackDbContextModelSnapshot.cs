// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strack.Model.Database;

#nullable disable

namespace Strack.Migrations
{
    [DbContext(typeof(StrackDbContext))]
    partial class StrackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("BeginUnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CaloriesKilocalories")
                        .HasColumnType("REAL");

                    b.Property<double?>("DurationSeconds")
                        .HasColumnType("REAL");

                    b.Property<long?>("FinishUnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sport")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TotalDistanceMeters")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.CadenceDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AvgCpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxCpm")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityCadence");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.ElevationDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AscentHeightMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgAscentSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgDescentSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgDownslopeGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("AvgUpslopeGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("DescentHeightMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("DownslopeDistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("DownslopeDurationSeconds")
                        .HasColumnType("REAL");

                    b.Property<double?>("FlatDistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("FlatDurationSeconds")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxAscentSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxDescentSpeed")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxDownslopeGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxUpslopeGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinGrade")
                        .HasColumnType("REAL");

                    b.Property<double?>("UpslopeDistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("UpslopeDurationSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityElevation");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.HeartrateDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AvgBpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxBpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinBpm")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityHeartrate");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.PowerDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AvgWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("FtpWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("If")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxWatts")
                        .HasColumnType("REAL");

                    b.Property<double?>("NpWatts")
                        .HasColumnType("REAL");

                    b.Property<int?>("Tss")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Vi")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityPower");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.SpeedDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AvgKph")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxKph")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivitySpeed");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.TemperatureDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AvgCelsius")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxCelsius")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinCelsius")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityTemperature");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.TimeDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MovingDurationSeconds")
                        .HasColumnType("REAL");

                    b.Property<double?>("PauseDurationSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivityTime");
                });

            modelBuilder.Entity("Strack.Model.Entity.Record.RecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("DistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<int?>("HeartrateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int?>("PowerWatts")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SpeedBpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<long?>("UnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.IGPSportData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("SourceIGPSport");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.XingZheData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("SourceXingZhe");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Source");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.CadenceDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Cadence")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.CadenceDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.ElevationDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Elevation")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.ElevationDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.HeartrateDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Heartrate")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.HeartrateDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.PowerDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Power")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.PowerDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.SpeedDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Speed")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.SpeedDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.TemperatureDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Temperature")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.TemperatureDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Data.TimeDataEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Time")
                        .HasForeignKey("Strack.Model.Entity.Activity.Data.TimeDataEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Record.RecordEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithMany("Records")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.IGPSportData", b =>
                {
                    b.HasOne("Strack.Model.Entity.Source.SourceEntity", "Source")
                        .WithOne("IGPSport")
                        .HasForeignKey("Strack.Model.Entity.Source.Data.IGPSportData", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.Data.XingZheData", b =>
                {
                    b.HasOne("Strack.Model.Entity.Source.SourceEntity", "Source")
                        .WithOne("XingZhe")
                        .HasForeignKey("Strack.Model.Entity.Source.Data.XingZheData", "SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Source")
                        .HasForeignKey("Strack.Model.Entity.Source.SourceEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Navigation("Cadence");

                    b.Navigation("Elevation");

                    b.Navigation("Heartrate");

                    b.Navigation("Power");

                    b.Navigation("Records");

                    b.Navigation("Source")
                        .IsRequired();

                    b.Navigation("Speed");

                    b.Navigation("Temperature");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Strack.Model.Entity.Source.SourceEntity", b =>
                {
                    b.Navigation("IGPSport");

                    b.Navigation("XingZhe");
                });
#pragma warning restore 612, 618
        }
    }
}
