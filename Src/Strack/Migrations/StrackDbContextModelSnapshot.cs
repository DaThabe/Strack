// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strack.Data;

#nullable disable

namespace Strack.Migrations
{
    [DbContext(typeof(StrackDbContext))]
    partial class StrackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("BeginUnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CaloriesKilocalories")
                        .HasColumnType("REAL");

                    b.Property<long?>("FinishUnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Record.ActivityRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<double?>("DistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<int?>("HeartrateBpm")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int?>("PowerWatts")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("SpeedBpm")
                        .HasColumnType("REAL");

                    b.Property<double?>("TemperatureCelsius")
                        .HasColumnType("REAL");

                    b.Property<long?>("UnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityRecord");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Source.ActivitySourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ImportUnixTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Platform")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("ActivitySource");
                });

            modelBuilder.Entity("Strack.Model.Entity.User.Credential.UserCredentialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCredential");
                });

            modelBuilder.Entity("Strack.Model.Entity.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<long>("ExternalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Platform")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Platform", "ExternalId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.User.UserEntity", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Strack.Model.Entity.Activity.Metrics.ActivityMetrics", "Metrics", b1 =>
                        {
                            b1.Property<Guid>("ActivityEntityId")
                                .HasColumnType("TEXT");

                            b1.HasKey("ActivityEntityId");

                            b1.ToTable("Activity");

                            b1.WithOwner()
                                .HasForeignKey("ActivityEntityId");

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.AltitudeMetrics", "Altitude", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("AltitudeAvgMeters");

                                    b2.Property<double?>("MaxMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("AltitudeMaxMeters");

                                    b2.Property<double?>("MinMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("AltitudeMinMeters");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.CadenceMetrics", "Cadence", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgCpm")
                                        .HasColumnType("REAL")
                                        .HasColumnName("CadenceAvgCpm");

                                    b2.Property<double?>("MaxCpm")
                                        .HasColumnType("REAL")
                                        .HasColumnName("CadenceMaxCpm");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.DistanceMetrics", "Distance", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("DownslopeMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DistanceDownslopeMeters");

                                    b2.Property<double?>("FlatMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DistanceFlatMeters");

                                    b2.Property<double?>("TotalMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DistanceTotalMeters");

                                    b2.Property<double?>("UpslopeMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DistanceUpslopeMeters");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.DurationMetrics", "Duration", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("DownslopeSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationDownslopeSeconds");

                                    b2.Property<double?>("FlatSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationFlatSeconds");

                                    b2.Property<double?>("MovingSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationMovingSeconds");

                                    b2.Property<double?>("PauseSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationPauseSeconds");

                                    b2.Property<double?>("TotalSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationTotalSeconds");

                                    b2.Property<double?>("UpslopeSeconds")
                                        .HasColumnType("REAL")
                                        .HasColumnName("DurationUpslopeSeconds");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.ElevationMetrics", "Elevation", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AscentHeightMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("ElevationAscentMeters");

                                    b2.Property<double?>("DescentHeightMeters")
                                        .HasColumnType("REAL")
                                        .HasColumnName("ElevationDescentMeters");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.HeartrateMetrics", "Heartrate", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgBpm")
                                        .HasColumnType("REAL")
                                        .HasColumnName("HeartrateAvgBpm");

                                    b2.Property<double?>("MaxBpm")
                                        .HasColumnType("REAL")
                                        .HasColumnName("HeartrateMaxBpm");

                                    b2.Property<double?>("MinBpm")
                                        .HasColumnType("REAL")
                                        .HasColumnName("HeartrateMinBpm");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.PowerMetrics", "Power", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgWatts")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerAvgWatts");

                                    b2.Property<double?>("FtpWatts")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerFtpWatts");

                                    b2.Property<double?>("If")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerIf");

                                    b2.Property<double?>("MaxWatts")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerMaxWatts");

                                    b2.Property<double?>("NpWatts")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerNpWatts");

                                    b2.Property<int?>("Tss")
                                        .HasColumnType("INTEGER")
                                        .HasColumnName("PowerTss");

                                    b2.Property<double?>("Vi")
                                        .HasColumnType("REAL")
                                        .HasColumnName("PowerVi");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.SlopeMetrics", "Slope", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("Avg")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeAvg");

                                    b2.Property<double?>("AvgDownslope")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeAvgDownslope");

                                    b2.Property<double?>("AvgUpslope")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeAvgUpslope");

                                    b2.Property<double?>("Max")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeMax");

                                    b2.Property<double?>("MaxDownslope")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeMaxDownslope");

                                    b2.Property<double?>("MaxUpslope")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeMaxUpslope");

                                    b2.Property<double?>("Min")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SlopeMin");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.SpeedMetrics", "Speed", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgAscentSpeed")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedAvgAscentMph");

                                    b2.Property<double?>("AvgDescentSpeed")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedAvgDescentMph");

                                    b2.Property<double?>("AvgKph")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedAvgKph");

                                    b2.Property<double?>("MaxAscentSpeed")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedMaxAscentMph");

                                    b2.Property<double?>("MaxDescentSpeed")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedMaxDescentMph");

                                    b2.Property<double?>("MaxKph")
                                        .HasColumnType("REAL")
                                        .HasColumnName("SpeedMaxKph");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.OwnsOne("Strack.Model.Entity.Activity.Metrics.WeatherMetrics", "Weather", b2 =>
                                {
                                    b2.Property<Guid>("ActivityMetricsActivityEntityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<double?>("AvgCelsius")
                                        .HasColumnType("REAL")
                                        .HasColumnName("TemperatureAvgCelsius");

                                    b2.Property<double?>("MaxCelsius")
                                        .HasColumnType("REAL")
                                        .HasColumnName("TemperatureMaxCelsius");

                                    b2.Property<double?>("MinCelsius")
                                        .HasColumnType("REAL")
                                        .HasColumnName("TemperatureMinCelsius");

                                    b2.HasKey("ActivityMetricsActivityEntityId");

                                    b2.ToTable("Activity");

                                    b2.WithOwner()
                                        .HasForeignKey("ActivityMetricsActivityEntityId");
                                });

                            b1.Navigation("Altitude")
                                .IsRequired();

                            b1.Navigation("Cadence")
                                .IsRequired();

                            b1.Navigation("Distance")
                                .IsRequired();

                            b1.Navigation("Duration")
                                .IsRequired();

                            b1.Navigation("Elevation")
                                .IsRequired();

                            b1.Navigation("Heartrate")
                                .IsRequired();

                            b1.Navigation("Power")
                                .IsRequired();

                            b1.Navigation("Slope")
                                .IsRequired();

                            b1.Navigation("Speed")
                                .IsRequired();

                            b1.Navigation("Weather")
                                .IsRequired();
                        });

                    b.Navigation("Metrics")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Record.ActivityRecordEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithMany("Records")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.Source.ActivitySourceEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.Activity.ActivityEntity", "Activity")
                        .WithOne("Source")
                        .HasForeignKey("Strack.Model.Entity.Activity.Source.ActivitySourceEntity", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Strack.Model.Entity.User.Credential.UserCredentialEntity", b =>
                {
                    b.HasOne("Strack.Model.Entity.User.UserEntity", "User")
                        .WithOne("Credential")
                        .HasForeignKey("Strack.Model.Entity.User.Credential.UserCredentialEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strack.Model.Entity.Activity.ActivityEntity", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Source")
                        .IsRequired();
                });

            modelBuilder.Entity("Strack.Model.Entity.User.UserEntity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Credential");
                });
#pragma warning restore 612, 618
        }
    }
}
